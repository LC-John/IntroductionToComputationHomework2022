/*****
题目描述

有A, B, C, D, E五家人共用一口井，已知井深不超过k米。A, B, C, D, E的绳长各不相同，而且厘米表示的绳长一定是整数。
从井口放下绳索正好达到水面时：
(a)需要A家的绳n1条接上B家的绳1条
(b)需要B家的绳n2条接上C家的绳1条
(c)需要C家的绳n3条接上D家的绳1条
(d)需要D家的绳n4条接上E家的绳1条
(e)需要E家的绳n5条接上A家的绳1条
问井深和各家绳长。

关于输入

输入只有1行。包括空格分开的6个整数。
第一个整数k（1 <= k <= 20)，代表井的最大深度（单位：米）。
接下来是5个正整数n1, n2, n3, n4, n5。这五个整数的含义见上面的题目描述。

关于输出

输出只有1行。
如果找到了可行解，就输出6个整数，用空格分开，分别代表井的深度和A, B, C, D, E的绳长（单位都是厘米）。
如果有多组可行解，输出井的深度最小的那组解。
如果不存在可行解，就输出一行：
not found

例子输入

10 2 3 4 5 6

例子输出

721 265 191 148 129 76
*****/

#include <iostream>
using namespace std;

#define N 5
#define M2CM(x) 100*(x) // 定义宏，进行米到厘米的换算

int K = 0;          // 最大井深
int n[N] = {0};     // 各家绳数
int l[N] = {0};     // 各家绳长

int main()
{
    bool flag = false;

    /** 读入数据 **/
    cin >> K;
    K = M2CM(K);
    for (int i = 0; i < N; i++)
        cin >> n[i];

    for (int k = 1; k <= K; k++)                // 从浅到深遍历井的深度
        for (l[0] = 1; l[0] * n[0] < k; l[0]++) // 从短到长遍历第一根绳的长度

            /** 计算各家绳长 **/
            for (int i = 1; i < N; i++)
            {
                l[i] = k - l[i - 1] * n[i - 1]; // 计算第i家的绳长
                if (l[i] <= 0)  // 若绳长非正
                    break;      // 则说明这一组l[0]设置不可行，终止当前循环

                /** 检测绳长是否各不相同 **/
                flag = false;   // 初始化标记为false，表示绳长都不相同
                for (int j = 0; j < i; j++)
                    if (l[i] == l[j])
                    {
                        flag = true;
                        break;
                    }
                if (flag)   // 若有相同绳长
                    break;  // 则这一组l[0]对应的不是可行解，终止当前循环

                /** 检测最后一家的绳长是否可行 **/
                if (i == N - 1 && l[i] * n[i] + l[0] == k)
                {
                    cout << k;
                    for (int j = 0; j < N; j++)
                        cout << " " << l[j];
                    return 0;   // 一旦发现可行解，则程序返回
                }
            }

    /** 不存在可行解 **/
    cout << "not found" << endl;
    return 0;
}
