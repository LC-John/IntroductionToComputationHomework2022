/*****
题目描述

在幼儿园中，老师安排小朋友做一个排队的游戏。首先老师精心的把数目相同的小男孩和小女孩编排在一个队列中，
每个小孩按其在队列中的位置发给一个编号（编号从0开始）。然后老师告诉小朋友们，站在前边的小男孩可以和他
后边相邻的小女孩手拉手离开队列，剩余的小朋友重新站拢，再按前后相邻的小男孩小女孩手拉手离开队列游戏，如
此往复。由于教师精心的安排，恰好可以保证每两个小朋友都能手拉手离开队列，并且最后离开的两个小朋友是编号
最小的和最大的两个小朋友。（注：只有小男孩在前，小女孩在后，且他们两之间没有其他的小朋友，他们才能手拉
手离开队列）。请根据老师的排队，按小女孩编号从小到大的顺序，给出所有手拉手离开队列的小男孩和小女孩的编
号对。

关于输入

用一个字符串代表小朋友队列。字符串中只会出现两个字符，分别代表小男孩和小女孩，首先出现的字符代表小男孩，
另一个字符代表小女孩。小孩总数不超过100
注意：只会出现两个字符不代表只会出现括号()

关于输出

按小女孩编号顺序，顺序输出手拉手离开队列的小男孩和小女孩的编号对，每行一对编号，编号之间用一个空格分隔。

例子输入

((()(())())(()))

例子输出

2 3
5 6
4 7
8 9
1 10
12 13
11 14
0 15
*****/

#include <iostream>
using namespace std;

/**
思路

我们使用一种叫做栈（stack）的数据结构来解这道题。栈只能从一端放入（push）或者取出（pop），其性质为后进先出。
举个例子，假设我们读到'('就push，读到')'就pop，那么对于输入的字符串"()(())()"，栈的状态变化如下：
Stack   Action  InputChar
(       Push    (
空      Pop     )
(       Push    (
((      Push    (
(       Pop     )
空      Pop     )
(       Push    (
空      Pop     )
栈可以很方便地帮助我们解决括号匹配一类的问题，也可以认为栈是解决这一类问题的标准做法。
这道题，我们可以维护一个栈，每当遇到左括号就push当前下标入栈，每当遇到有括号就pop并输出。
**/

#define MAX_LEN 110
int st[MAX_LEN] = {0}, n_st = 0;

int main()
{
    char c = 0, lc = 0, rc = 0;
    for (int i = 0; ; i++)
    {
        cin.get(c);
        if (c == '\n')
            break;
        if (!lc)
            lc = c;
        if (!rc && lc && lc != c)
            rc = c;
        if (c == lc)
            st[n_st++] = i; // Push
        else
            cout << st[--n_st] << " " << i << endl; // Pop & output
    }
    return 0;
}
